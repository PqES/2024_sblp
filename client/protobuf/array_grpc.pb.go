// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: protobuf/array.proto

package array

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ArrayService_Search_FullMethodName = "/protobuf.ArrayService/Search"
)

// ArrayServiceClient is the client API for ArrayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArrayServiceClient interface {
	Search(ctx context.Context, in *Array, opts ...grpc.CallOption) (*Num, error)
}

type arrayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArrayServiceClient(cc grpc.ClientConnInterface) ArrayServiceClient {
	return &arrayServiceClient{cc}
}

func (c *arrayServiceClient) Search(ctx context.Context, in *Array, opts ...grpc.CallOption) (*Num, error) {
	out := new(Num)
	err := c.cc.Invoke(ctx, ArrayService_Search_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArrayServiceServer is the server API for ArrayService service.
// All implementations must embed UnimplementedArrayServiceServer
// for forward compatibility
type ArrayServiceServer interface {
	Search(context.Context, *Array) (*Num, error)
	mustEmbedUnimplementedArrayServiceServer()
}

// UnimplementedArrayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArrayServiceServer struct {
}

func (UnimplementedArrayServiceServer) Search(context.Context, *Array) (*Num, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedArrayServiceServer) mustEmbedUnimplementedArrayServiceServer() {}

// UnsafeArrayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArrayServiceServer will
// result in compilation errors.
type UnsafeArrayServiceServer interface {
	mustEmbedUnimplementedArrayServiceServer()
}

func RegisterArrayServiceServer(s grpc.ServiceRegistrar, srv ArrayServiceServer) {
	s.RegisterService(&ArrayService_ServiceDesc, srv)
}

func _ArrayService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Array)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArrayServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArrayService_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArrayServiceServer).Search(ctx, req.(*Array))
	}
	return interceptor(ctx, in, info, handler)
}

// ArrayService_ServiceDesc is the grpc.ServiceDesc for ArrayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArrayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.ArrayService",
	HandlerType: (*ArrayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _ArrayService_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/array.proto",
}
